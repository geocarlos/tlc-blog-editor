[{"D:\\workspace\\my-site\\tlc\\composer\\src\\index.tsx":"1","D:\\workspace\\my-site\\tlc\\composer\\src\\reportWebVitals.ts":"2","D:\\workspace\\my-site\\tlc\\composer\\src\\App.tsx":"3","D:\\workspace\\my-site\\tlc\\composer\\src\\web-components\\components.ts":"4","D:\\workspace\\my-site\\tlc\\composer\\src\\components\\List.tsx":"5","D:\\workspace\\my-site\\tlc\\composer\\src\\constants.ts":"6","D:\\workspace\\my-site\\tlc\\composer\\src\\api\\api.ts":"7","D:\\workspace\\my-site\\tlc\\composer\\src\\components\\Authenticator.tsx":"8","D:\\workspace\\my-site\\tlc\\composer\\src\\components\\Routes.tsx":"9","D:\\workspace\\my-site\\tlc\\composer\\src\\components\\Editor.tsx":"10","D:\\workspace\\my-site\\tlc\\composer\\src\\components\\CategoryEditor.tsx":"11"},{"size":574,"mtime":1609601508404,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1609072675292,"results":"14","hashOfConfig":"13"},{"size":2063,"mtime":1609789295401,"results":"15","hashOfConfig":"13"},{"size":1650,"mtime":1609936889065,"results":"16","hashOfConfig":"13"},{"size":1432,"mtime":1609940029511,"results":"17","hashOfConfig":"13"},{"size":249,"mtime":1613477217136,"results":"18","hashOfConfig":"13"},{"size":1273,"mtime":1609789092612,"results":"19","hashOfConfig":"13"},{"size":2043,"mtime":1609769776814,"results":"20","hashOfConfig":"13"},{"size":1502,"mtime":1609770046469,"results":"21","hashOfConfig":"13"},{"size":4110,"mtime":1614525713801,"results":"22","hashOfConfig":"13"},{"size":1281,"mtime":1609791492339,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"4drmd8",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"D:\\workspace\\my-site\\tlc\\composer\\src\\index.tsx",[],["49","50"],"D:\\workspace\\my-site\\tlc\\composer\\src\\reportWebVitals.ts",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\App.tsx",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\web-components\\components.ts",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\components\\List.tsx",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\constants.ts",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\api\\api.ts",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\components\\Authenticator.tsx",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\components\\Routes.tsx",[],"D:\\workspace\\my-site\\tlc\\composer\\src\\components\\Editor.tsx",["51"],"import { Button, makeStyles, TextField } from \"@material-ui/core\"\r\nimport { useContext, useEffect, useState, useRef } from \"react\";\r\nimport { createPost } from \"../api/api\";\r\nimport { AppContext } from \"../App\";\r\nimport CategoryEditor from \"./CategoryEditor\";\r\n\r\nconst useStyles = makeStyles({\r\n    editor: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '50% 50%',\r\n        width: '90%',\r\n        minHeight: '90%',\r\n        margin: 'auto',\r\n        columnGap: '1.5rem'\r\n    },\r\n    column: {\r\n        width: '100%'\r\n    },\r\n    bodyInput: {\r\n        minHeight: '10rem',\r\n        width: '100%',\r\n        background: '#eee'\r\n    },\r\n    categories: {\r\n        display: 'inline',\r\n        width: 'fit-content',\r\n        position: 'relative',\r\n        overflow: 'visible'\r\n    }\r\n});\r\n\r\nconst languages = [\r\n    {label: 'English', value: 'en'},\r\n    {label: 'PortuguÃªs', value: 'pt'}\r\n]\r\n\r\nconst Editor = () => {\r\n    const classes = useStyles();\r\n    const editorRef = useRef();\r\n    const [state, setState] = useState({\r\n        uri: '',\r\n        title: '',\r\n        body: '',\r\n        language: 'en',\r\n        category: '',\r\n        author: ''\r\n    });\r\n    const [showCatEdit, setShowCatEdit] = useState(false);\r\n\r\n    const {selectedPost: post, categories} = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        if (!post) {\r\n            return;\r\n        }\r\n        setState(post);\r\n    }, [post])\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const uri = state.uri ? state.uri : state.title.toLocaleLowerCase().replace(/\\s/g, '-');\r\n        createPost({...state, uri, createdAt: post.createdAt || new Date().getTime()})\r\n        .then(() => {\r\n            window.location.reload();\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n\r\n    const handleChange = ({target}: any) => {\r\n        if (!target.name) {\r\n            setState(prev => ({...prev, body: target.innerText}))\r\n        }\r\n        setState(prev => ({...prev, [target.name]: target.value}))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.editor}>\r\n            <div className={classes.column}>\r\n            <h2>New Post</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <TextField label=\"title\" name=\"title\" value={state.title} onChange={handleChange} style={{\r\n                    margin: '1rem 0',\r\n                    width: '100%'\r\n                }} />\r\n                <select value={state.language} onChange={handleChange} name=\"language\" >\r\n                    {languages.map(lang => (<option key={lang.value} value={lang.value}>{lang.label}</option>))}\r\n                </select>\r\n                <div className={classes.categories}>\r\n                    <select value={state.category} onChange={handleChange} name=\"category\" >\r\n                        {categories.filter((cat: any) => cat.language === state.language).map((cat:any) => (\r\n                            <option key={cat.name} value={cat.name}>{cat.name}</option>\r\n                        ))} \r\n                    </select>\r\n                    <Button onClick={() => setShowCatEdit(prev => !prev)}>{showCatEdit ? 'Close' : 'Add Category'}</Button>\r\n                    {showCatEdit && <CategoryEditor language={state.language}/>}\r\n                </div>\r\n                <text-input ref={editorRef} onMouseUp={() => {\r\n                    if (editorRef && editorRef.current) {\r\n                        const el: any = editorRef.current;\r\n                        console.log(window.getSelection()?.toString());\r\n                    }\r\n                }} className={classes.bodyInput} initialValue={post?.body} contentEditable onInput={handleChange}/>\r\n                <div style={{padding: '1rem 0'}}>\r\n                    <Button size=\"small\" variant=\"contained\" type=\"submit\">Save</Button>\r\n                </div>\r\n            </form>\r\n            </div>\r\n            <div className={classes.column}>\r\n                <post-body-edit body={state.body}></post-body-edit>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor;","D:\\workspace\\my-site\\tlc\\composer\\src\\components\\CategoryEditor.tsx",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":99,"column":31,"nodeType":"60","messageId":"61","endLine":99,"endColumn":38},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'el' is assigned a value but never used.","Identifier","unusedVar",["64"],["65"],"no-global-assign","no-unsafe-negation"]